import os, vk_api
from vkbottle.bot import Message, Bot
from vkbottle import BaseStateGroup, CtxStorage
from database.database_methods import *
from card_creation import Create
from action import action_bot, action_card


class State(BaseStateGroup):
     CITY = 1
     SEX = 2
     AGE = 3 
     END = 4
     CITY_EDIT = ''
     AGE_EDIT = ''
     SEX_EDIT = ''

class handlers_start:

    def __init__(self) -> None:
        self.action_bot = action_bot()
        self.action_card = action_card()
        self.bot = Bot(os.getenv('vkinder'))
        self.create = Create()
        self.states = State
        self.ctx = CtxStorage()

        #–ù–∞—á–∞–ª–æ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ vkinder
        @self.bot.on.message(lev="–ù–∞—á–∞—Ç—å")
        async def start(message: Message):
            if get_user_info(message.peer_id) != None:
                return "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é\n –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            user_info = await self.bot.api.users.get(message.from_id)
            first_name = user_info[0].first_name
            await message.answer("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {}".format(first_name))
            self.ctx.set("name", first_name)
            self.ctx.set("id", message.from_id)
            await self.bot.state_dispenser.set(message.peer_id, self.states.CITY)
            return "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ"
        
        @self.bot.on.message(state=self.states.CITY)
        async def city(message: Message):
            if len(message.text.split()) != 1:
                await self.bot.state_dispenser.set(message.peer_id, self.states.CITY)
                return "–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥"
            self.ctx.set("city", message.text)
            await self.bot.state_dispenser.set(message.peer_id, self.states.SEX)
            return "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –º/–∂"
        
        # #–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        @self.bot.on.message(state=self.states.SEX)
        async def sex(message:Message):
            if message.text not in ["–º","–∂"]:
                await self.bot.state_dispenser.set(message.peer_id, self.states.SEX)
                return "–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–æ–ª"
            self.ctx.set("sex", message.text)
            await self.bot.state_dispenser.set(message.peer_id, self.states.AGE)
            return "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–æ—Å—Ç"
        
        # #–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        # #–ò –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        @self.bot.on.message(state = self.states.AGE)
        async def age(message:Message):
            if message.text.isdigit() == False :
                await self.bot.state_dispenser.set(message.peer_id, self.states.AGE)
                return "–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç"
            self.ctx.set("age", message.text)
            name = self.ctx.get("name")
            _age = self.ctx.get("age")
            _city = self.ctx.get("city")
            _sex = self.ctx.get("sex")
            id = self.ctx.get("id")
            if _sex == "–º":
                await add_user(id, name, "male", int(_age) - 3, int(_age) + 3, _city)
            elif _sex == "–∂":
                await add_user(id, name, "female", int(_age) - 3, int(_age) + 3, _city)
            keyboard = await self.create.keyboard("start")
            await self.bot.state_dispenser.delete(message.peer_id)
            await message.answer(
                                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ãx \n –ò–º—è: {name}\n –ì–æ—Ä–æ–¥:{_city}\n –ü–æ–ª:{_sex}\n –í–æ–∑—Ä–∞—Å—Ç:{_age}",
                                keyboard=keyboard
                                )
            
        @self.bot.on.message(text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        async def main_menu(message: Message):
            keyboard = await self.create.keyboard(message.text)
            await message.answer(
                                "–ü–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                keyboard=keyboard
                                )
        #–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ª—é–¥–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        @self.bot.on.message(text="–ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
        async def start(message: Message):
            matched = await self.action_bot.start_search(message)
            owner_id = matched.pop(0)
            user_info = await self.action_bot.search_user_info(owner_id)
            self.ctx.set("matched", matched)
            previous = []
            now = [owner_id]
            self.ctx.set('now', now)
            self.ctx.set('previous', previous)
            photos = await self.action_bot.search_max_like_fotos(owner_id)
            self.bot.state_dispenser.set("photos", photos)
            kb = await self.create.keyboard(message.text)
            user_info = await self.action_bot.search_user_info(owner_id)
            await message.answer(attachment=photos[0])
            await message.answer(
                                user_info, 
                                keyboard=kb
                                )
            
        @self.bot.on.message(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
        async def go_on(message: Message):
            matched = self.ctx.get("matched")
            print(matched)
            
        @self.bot.on.message(text="–°–ª–µ–¥—É—â–∏–π")
        async def next_user(message: Message):
            now = (self.ctx.get('now'))
            previous = (self.ctx.get('previous'))
            old_owner_id = now.pop(0)
            previous.append(old_owner_id)
            self.ctx.set('previous', previous)
            matched = self.ctx.get('matched')
            owner_id = matched.pop(0)
            now.append(owner_id)
            self.ctx.set('now', now)
            self.ctx.set('matched', matched)
            user_info = await self.action_bot.search_user_info(owner_id)
            photos = (await self.action_bot.search_max_like_fotos(owner_id))
            self.bot.state_dispenser.set("photos", photos)
            kb = await self.create.keyboard(message.text)
            print(user_info, photos[1])
            await message.answer(attachment=photos[0])
            await message.answer(
                                user_info, 
                                keyboard=kb
                                )
            
        @self.bot.on.message(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π")
        async def previous_user(message: Message):
            now = self.ctx.get('now')
            previous = self.ctx.get('previous')
            matched = self.ctx.get('matched')
            old_owner_id = now.pop(0)
            matched.insert(0, old_owner_id)
            owner_id = previous.pop(-1)
            now.append(owner_id)
            self.ctx.set('now', now)
            self.ctx.set('matched', matched)
            self.ctx.set('previous',previous)
            user_info = await self.action_bot.search_user_info(owner_id)
            photos = await self.action_bot.search_max_like_fotos(owner_id)
            self.bot.state_dispenser.set("photos", photos)
            kb = self.create.keyboard(message.text)
            await message.answer(attachment=photos[0])
            await message.answer(
                                user_info, 
                                keyboard=kb
                                )
            
        @self.bot.on.message(text="‚ù§")
        async def like_users(message: Message):
            favorite_id = (await self.ctx.get('now'))[0]
            photos = self.bot.state_dispenser.get('photos')
            await add_user_favorite(message.peer_id, favorite_id, False)
            # await add_photos(favorite_id, photos[0], photos[1], photos[2])

        @self.bot.on.message(text="üö´")
        async def black_list_users(message:Message):
            await message.answer(
                                "–ö–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                                )
            # now =  self.ctx.get('now')
            # favorite_id = now.pop(0)
            # await send_to_blacklist(message.peer_id, favorite_id, True)
            # await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            # matched = self.ctx.get('matched')
            # owner_id = matched.pop(0)
            # now.append(owner_id)
            # self.ctx.set('matched', matched)
            # self.ctx.set('now', now)
            # user_info = await self.action_bot.search_user_info(owner_id)
            # photos = await self.action_bot.search_max_like_fotos(owner_id)
            # kb = self.create.keyboard(message.text)
            # await message.answer(attachment=photos[0])
            # await message.answer(
            #                     user_info, 
            #                     keyboard=kb
            #                     )
            
        @self.bot.on.message(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è")
        async def like_users(message: Message):
            await get_favorite_info()

        @self.bot.on.message(text="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        async def black_list_users(message:Message):
            await message.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        @self.bot.on.message(text = "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        async def change_data(message: Message):
            keyboard = await self.create.keyboard(message.text)
            await message.answer('–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', keyboard=keyboard)

        @self.bot.on.message(lev = "–ì–æ—Ä–æ–¥")
        async def city_edit_state(message: Message):
            await message.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # await self.bot.state_dispenser.set(message.peer_id, self.states.CITY_EDIT)

        
        @self.bot.on.message(state=self.states.CITY_EDIT)
        async def city_edit(message: Message):
            if len(message.text.split()) != 1:
                await self.bot.state_dispenser.set(message.peer_id, self.states.CITY_EDIT)
                return "–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥"
            await self.bot.state_dispenser.delete(message.peer_id)
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
            

        @self.bot.on.message(lev = "–í–æ–∑—Ä–∞—Å—Ç")
        async def age_edit_state(message: Message):
            await message.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # await self.bot.state_dispenser.set(message.peer_id, self.states.AGE_EDIT)

        @self.bot.on.message(state=self.states.AGE_EDIT)
        async def age_edit(message: Message):
            if message.text.isdigit() == False :
                await self.bot.state_dispenser.set(message.peer_id, self.states.AGE_EDIT)
                return "–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç"
            await self.bot.state_dispenser.delete(message.peer_id)
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
        
        @self.bot.on.message(lev = "–ü–æ–ª")
        async def sex_edit_state(message: Message):
            await message.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # await self.bot.state_dispenser.set(message.peer_id, self.states.SEX_EDIT)
        
        @self.bot.on.message(state = self.states.SEX_EDIT)
        async def sex_edit(message: Message):
            if message.text not in ["–º","–∂"]:
                await self.bot.state_dispenser.set(message.peer_id, self.states.SEX)
                return "–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–æ–ª"
            await self.bot.state_dispenser.delete(message.peer_id)
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")